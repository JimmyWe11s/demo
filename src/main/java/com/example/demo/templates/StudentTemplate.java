package com.example.demo.templates;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import com.example.demo.entities.Student;

/*
 * Auto generated code to render template com/example/demo/templates/StudentTemplate.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class StudentTemplate extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.HTML; }
    static public String getTemplateName() { return "StudentTemplate.rocker.html"; }
    static public String getTemplatePackageName() { return "com.example.demo.templates"; }
    static public String getHeaderHash() { return "1192808373"; }
    static public long getModifiedAt() { return 1629355785197L; }
    static public String[] getArgumentNames() { return new String[] { "student" }; }

    // argument @ [3:2]
    private Student student;

    public StudentTemplate student(Student student) {
        this.student = student;
        return this;
    }

    public Student student() {
        return this.student;
    }

    static public StudentTemplate template(Student student) {
        return new StudentTemplate()
            .student(student);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // <p>\n    Name = \"
        static private final byte[] PLAIN_TEXT_0_0;
        // \"\n    Age = \"
        static private final byte[] PLAIN_TEXT_1_0;
        // \"\n    Gender = \"
        static private final byte[] PLAIN_TEXT_2_0;
        // \"\n</p>
        static private final byte[] PLAIN_TEXT_3_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(StudentTemplate.class.getClassLoader(), StudentTemplate.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
        }

        // argument @ [3:2]
        protected final Student student;

        public Template(StudentTemplate model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.student = model.student();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [3:24]
            __internal.aboutToExecutePosInTemplate(3, 24);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [6:13]
            __internal.aboutToExecutePosInTemplate(6, 13);
            __internal.renderValue(raw(student.getName()), false);
            // PlainText @ [6:36]
            __internal.aboutToExecutePosInTemplate(6, 36);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [7:12]
            __internal.aboutToExecutePosInTemplate(7, 12);
            __internal.renderValue(raw(student.getAge()), false);
            // PlainText @ [7:34]
            __internal.aboutToExecutePosInTemplate(7, 34);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [8:15]
            __internal.aboutToExecutePosInTemplate(8, 15);
            __internal.renderValue(raw(student.getGender()), false);
            // PlainText @ [8:40]
            __internal.aboutToExecutePosInTemplate(8, 40);
            __internal.writeValue(PLAIN_TEXT_3_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "<p>\n    Name = \"";
        static private final String PLAIN_TEXT_1_0 = "\"\n    Age = \"";
        static private final String PLAIN_TEXT_2_0 = "\"\n    Gender = \"";
        static private final String PLAIN_TEXT_3_0 = "\"\n</p>";

    }

}
